/*
 * This source file was generated by the Gradle 'init' task
 */

package pa4;

public class BST {
    
    public static class Node {
        public int value;
        public Node left;
        public Node right;

        public Node(int value) {
            this.value = value;
            this.left = null;
            this.right = null;
        }
    }

    public Node root;

    public BST() {
        this.root = null;
    }

    /**
     * Insert a node with a given value into the BST.
     * @param value the value of the node to insert
     */
    public void insert(int value) {
        if (this.root == null)
            this.root = new Node(value);
        else 
            insertHelper(this.root, value);
    }

    
    public void insertHelper(Node curr, int value) {
        if (curr.value == value) {
            return;
        }

        if (curr.value < value) { 
            if (curr.right == null)
                curr.right = new Node(value);
            else
                insertHelper(curr.right, value);
        } else {
            if (curr.left == null)
                curr.left = new Node(value);
            else
                insertHelper(curr.left, value);
        }
    }

    /**
     * Delete a node with a given value from the BST.
     * @param value the value of the node to delete
     */
    public void delete(int value) {
        this.root = deleteHelper(this.root, value);
    }

    // Helper function to delete a node from the BST recursively
    public Node deleteHelper(Node curr, int value) {
        if (curr == null) {
            return null;
        }

        if (curr.value < value) {
            curr.right = deleteHelper(curr.right, value);
        } else if (curr.value > value) {
            curr.left = deleteHelper(curr.left, value);
        } else {
            if (curr.left == null && curr.right == null) {
                return null;
            } else if (curr.left == null) {
                return curr.right;
            } else if (curr.right == null) {
                return curr.left;
            } else {
                Node inorderSuccessor = getInorderSuccessor(curr);
                curr.value = inorderSuccessor.value;
                curr.right = deleteHelper(curr.right, inorderSuccessor.value);
            }
        }
        return curr;
    }

    // Helper function to find the inorder successor (smallest value in the right subtree)
    public Node getInorderSuccessor(Node node) {
        Node current = node.right;
        while (current.left != null) {
            current = current.left;
        }
        return current;
    }

    /**
     * Search for a node with a given value in the BST and return true if found.
     * @param value the value to search for
     * @return true if the value is found, otherwise false
     */
    public boolean search(int value) {
        return searchHelper(this.root, value);
    }

    
    public boolean searchHelper(Node curr, int value) {
        if (curr == null)
            return false;
        
        if (curr.value == value) 
            return true;

        if (value < curr.value) 
            return searchHelper(curr.left, value);
        else 
            return searchHelper(curr.right, value);
    }

    /**
     * Update a node with a given old value to a new value in the BST.
     * @param oldValue the old value of the node to update
     * @param newValue the new value of the node to update
     */
    public void update(int oldValue, int newValue) {
        delete(oldValue);
        insert(newValue);
    }

    /**
     * Traverse the BST in inorder and return the values as a string. 
     * @return the inorder traversal of the BST as a space-separated string
     */
    public String inOrder() {
        return inOrderHelper(this.root);
    }

    
    public String inOrderHelper(Node curr) {
        if (curr == null)
            return ""; 
            
        String left = inOrderHelper(curr.left);
        String result = curr.value + " ";
        String right = inOrderHelper(curr.right);
        return left + result + right;
    }

    /**
     * Convert a sorted array to a balanced BST.
     * @param arr the sorted array to convert
     * @return the root node of the balanced BST
     */
    public static Node sortedArrayToBST(int[] arr) {
        return sortedArrayToBSTHelper(arr, 0, arr.length - 1);
    }

    
    public static Node sortedArrayToBSTHelper(int[] arr, int start, int end) {
        if (start > end) {
            return null; // Base case
        }
        int mid = (start + end) / 2;
        Node node = new Node(arr[mid]);
        node.left = sortedArrayToBSTHelper(arr, start, mid - 1);
        node.right = sortedArrayToBSTHelper(arr, mid + 1, end); 
        return node;
    }

    /**
     * Find the lowest common ancestor of two nodes with given values in the BST.
     * @param value1 the first value
     * @param value2 the second value
     * @return the lowest common ancestor node
     */
    public Node lowestCommonAncestor(int value1, int value2) {
        return lowestCommonAncestorHelper(this.root, value1, value2);
    }

    
    public Node lowestCommonAncestorHelper(Node curr, int value1, int value2) {
        if (curr == null) {
            return null;
        }
    
        if (value1 < curr.value && value2 < curr.value) {
            return lowestCommonAncestorHelper(curr.left, value1, value2);
        }
    
        if (value1 > curr.value && value2 > curr.value) {
            return lowestCommonAncestorHelper(curr.right, value1, value2);
        }
    
        return curr;
    }
    
    public static void main(String[] args) {

        BST bst = new BST();
        bst.insert(5);
        bst.insert(3);
        bst.insert(7);
        bst.insert(2);
        bst.insert(4);
        bst.insert(6);
        bst.insert(8);

        System.out.println(bst.inOrder());
        bst.delete(3);
        System.out.println(bst.inOrder());
        System.out.println(bst.search(3));
        System.out.println(bst.search(4));
        bst.update(4, 9);
        System.out.println(bst.inOrder());

        int[] arr = {1, 2, 3, 4, 5, 6, 7};
        Node root = BST.sortedArrayToBST(arr);
        System.out.println(root.value);

        System.out.println(bst.lowestCommonAncestor(2, 4).value);
        System.out.println(bst.lowestCommonAncestor(2, 6).value);

    }
}